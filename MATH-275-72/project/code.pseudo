{function prototypes}
procedure add(bit string, bit string)
procedure base_ten_expansion(bit string)
procedure base_two_expansion(positive integer, positive integer > 1)
procedure multiply(bit string, bit string)

procedure main()

    { 
        I am going to make the assumption we are dealing with atleast a 16 bit system.
        I feel that is a safe assumption given most systems are 32 bit or 64 bit in use today
        and we are using unsigned ints (positive integer = unsigned int). 
        There is nothing in the book about support or lack of support for bitwise operators in the psuedo language.
        I also believe it is safe to assume support. Almost every langauge I have encountered supported bitwise operators.
        I also believe this assumption can be supported because the psuedo language has no mention of MOD or DIV but they are included.
    }

    {Some arbitray way input is collected. i.e read()}
    I := input(9)
    J := input(10)

    {input: 9, 2; output: 0000000000001001}
    i_binary := base_two_expansion(I, 2)

    {input: 9, 2; output: 0000000000001010}
    j_binary := base_two_expansion(J, 2)

    {input: 0000000000001001, 0000000000001010; output: 0000000001011010}
    product_binary := multiply(i_binary, j_binary)

    {input: 0000000001011010, output: 90}
    result := base_ten_expansion(product_binary)

return result = 90

{p = 0000000000000000; c_0 = 0000000000000000}
procedure add(0000000000000000, 0000000000000000)
    c := 0

    {for the entire loop everything is zero}
    for j := 0..15 to 15
        d := a=0 + b=0 + c=0 div 2 = 0
        s_0 = a=0 + b=0, c=0 - 2(0) = 0
        c := d = 0

return 0000000000000000

{p = 0000000000000000; c_1 = 0000000000010010}
procedure add(0000000000000000, 0000000000010010)
    c := 0 

    for j := 0 to 15
        d := a_0=0 + b_0=0, c=0 div 2 = 0 
        s_0 = a_0=0 + b_0=0, c=0 - 2(0) = 0
        c := d = 0
    
    for j := 1 to 15
        d := a_1=0 + b_1=1, c=0 div 2 = 0 
        s_0 = a_1=0 + b_1=1, c=0 - 2(0) = 1
        c := d = 0
    
    for j := 2 to 15
        d := a_2=0 + b_2=0, c=0 div 2 = 0 
        s_0 = a_2=0 + b_2=0, c=0 - 2(0) = 0
        c := d = 0
    
    for j := 3 to 15
        d := a_3=0 + b_3=0, c=0 div 2 = 0 
        s_0 = a_3=0 + b_3=0, c=0 - 2(0) = 0
        c := d = 0
    
    for j := 4 to 15
        d := a_4=0 + b_4=1, c=0 div 2 = 0 
        s_0 = a_4=0 + b_4=1, c=0 - 2(0) = 1
        c := d = 0

    {for the rest of the loop everyting is zero}
    for j := 5..15 to 15
        d := a=0 + b=0 + c=0 div 2 = 0
        s_0 = a=0 + b=0, c=0 - 2(0) = 0
        c := d = 0

return s_15, ..., s_0 = 0000000000010010

{p = 0000000000010010; c_2 = 0000000000000000}
procedure add(0000000000010010, 0000000000000000)
    c := 0 

    for j := 0 to 15
        d := a_0=0 + b_0=0, c=0 div 2 = 0 
        s_0 = a_0=0 + b_0=0, c=0 - 2(0) = 0
        c := d = 0
    
    for j := 1 to 15
        d := a_1=1 + b_1=0, c=0 div 2 = 0 
        s_0 = a_1=1 + b_1=0, c=0 - 2(0) = 1
        c := d = 0
    
    for j := 2 to 15
        d := a_2=0 + b_2=0, c=0 div 2 = 0 
        s_0 = a_2=0 + b_2=0, c=0 - 2(0) = 0
        c := d = 0
    
    for j := 3 to 15
        d := a_3=0 + b_3=0, c=0 div 2 = 0 
        s_0 = a_3=0 + b_3=0, c=0 - 2(0) = 0
        c := d = 0
    
    for j := 4 to 15
        d := a_4=1 + b_4=0, c=0 div 2 = 0 
        s_0 = a_4=1 + b_4=0, c=0 - 2(0) = 1
        c := d = 0

    {for the rest of the loop everyting is zero}
    for j := 5..15 to 15
        d := a=0 + b=0 + c=0 div 2 = 0
        s_0 = a=0 + b=0, c=0 - 2(0) = 0
        c := d = 0

return s_15,..., s_0 = 0000000000010010

{p = 0000000000010010; c_3 = 0000000001001000}
procedure add(0000000000010010, 0000000001001000)
    c := 0 

    for j := 0 to 15
        d := a_0=0 + b_0=0, c=0 div 2 = 0 
        s_0 = a_0=0 + b_0=0, c=0 - 2(0) = 0
        c := d = 0
    
    for j := 1 to 15
        d := a_1=1 + b_1=0, c=0 div 2 = 0 
        s_0 = a_1=1 + b_1=0, c=0 - 2(0) = 1
        c := d = 0
    
    for j := 2 to 15
        d := a_2=0 + b_2=0, c=0 div 2 = 0 
        s_0 = a_2=0 + b_2=0, c=0 - 2(0) = 0
        c := d = 0
    
    for j := 3 to 15
        d := a_3=0 + b_3=1, c=0 div 2 = 0 
        s_0 = a_3=0 + b_3=1, c=0 - 2(0) = 1
        c := d = 0
    
    for j := 4 to 15
        d := a_4=1 + b_4=0, c=0 div 2 = 0 
        s_0 = a_4=1 + b_4=0, c=0 - 2(0) = 1
        c := d = 0

    for j := 5 to 15
        d := a_5=0 + b_5=0, c=0 div 2 = 0 
        s_0 = a_5=0 + b_5=0, c=0 - 2(0) = 0
        c := d = 0
    
    for j := 6 to 15
        d := a_6=0 + b_6=1, c=0 div 2 = 0 
        s_0 = a_6=0 + b_6=1, c=0 - 2(0) = 1
        c := d = 0

    {for the rest of the loop everyting is zero}
    for j := 7..15 to 15
        d := a=0 + b=0 + c=0 div 2 = 0
        s_0 = a=0 + b=0, c=0 - 2(0) = 0
        c := d = 0

return s_15, ..., s_0 = 0000000001011010

{binar to base 10}
procedure base_ten_expansion(0000000001011010)
    s := 01011010
    r := 0

    {
        multline comment for logic:
        for b := 0 to n-1
            if s_b == 1 then
                r = r + 2^b
        if not true do nothing and continue loop
    }
    
    {length of bit string}
    for b := 0 to 15
        if s_0=0 == 1 then
            r += 2^0 {false}
    
    for b := 1 to 15
        if s_1=1 == 1 then
            r += 2^1 {true r = 0+2=2}
    
    for b := 2 to 15
        if s_2=0 == 1 then
            r += 2^2 {false}

    for b := 3 to 15
        if s_3=1 == 1 then
            r += 2^3 {true r = 2+8=10}

    for b := 4 to 15
        if s_4=1 == 1 then
            r += 2^4 {true r = 10+16 = 26}
    
    for b := 5 to 15
        if s_5=0 == 1 then
            r += 2^5 {false}
    
    for b := 6 to 15
        if s_6=1 == 1 then
            r += 2^6 {true r = 26+64=90}

    {the rest of the loop if is false and the loop does nothing}
    for b := 7..15 to 15
        if s_b=0 == 1 then
            r += 2^b {false}

return r = 90

{i_binary}
procedure base_two_expansion(9, 2)
    q := 9
    k := 0
    while q = 9 != 0
        a_0 := 9 mod 2 = 1
        q := 9 div 2 = 4
        k := k + 1 = 1

    while q = 4 != 0
        a_1 := 4 mod 2 = 0
        q := 4 div 2 = 2
        k := k + 1 = 2

    while q = 2 != 0
        a_2 := 2 mod 2 = 0
        q := 2 div 2 = 1
        k := k + 1 = 3
    
    while q = 1 != 0
        a_3 := 1 mod 2 = 1
        q := 1 div 2 = 0
        k := k + 1 = 4

    while q = 0 != 0
        break

return (a_15, ..., a_0 = 0000000000001001)

{j_binary}
procedure base_two_expansion(10, 2)
    q := 10
    k := 0
    while q = 10 != 0
        a_0 := 10 mod 2 = 0
        q := 10 div 2 = 5
        k := k + 1 = 1

    while q = 5 != 0
        a_1 := 5 mod 2 = 1
        q := 5 div 2 = 2
        k := k + 1 = 2

    while q = 2 != 0
        a_2 := 2 mod 2 = 0
        q := 2 div 2 = 1
        k := k + 1 = 3
    
    while q = 1 != 0
        a_3 := 1 mod 2 = 1
        q := 1 div 2 = 0
        k := k + 1 = 4

    while q = 0 != 0
        break

return (a_3 a_2 a_1 a_0 = 0000000000001010)

{i_binary, j_binary}
procedure multiply(0000000000001001, 0000000000001010)
    
    {
        multiline comment for logic:
        for j := 0  to 15
            if b_j == 1 then
                c_j := a << j ;a is bit shifted j places
            else
                c_0 := 0; filled 16 bits
    }

    for j := 0 to 15
        if b_0 = 0 == 1 then 
            c_0 := a << j {false}
        else
            c_0 := 0000000000000000 {true}

    for j := 1 to 15
        if b_1 = 1 = 1 then 
            c_1 := 0000000000001001 << 1 = 0000000000010010 {true}
        else
            c_1 := 0 {false}
    
    for j := 2 to 15
        if b_2 = 0 = 1 then 
            c_2 := a << j {false}
        else
            c_2 := 0000000000000000 {true}

    for j := 3 to 15
        if b_3 = 1 = 1 then 
            c_3 := 0000000000001001 << 3 = 0000000001001000 {true}
        else
            c_3 := 0 {false}
    
    for j := 4..15 to 15
        {every position of b_j,from 4 to 15, is 0 and there for c_j, from 4 to 15, is 0}

    p := 0
    for j := 0 to 15
        p := add(0000000000000000, c_0=0000000000000000) = 00000000000000000
    
    for j := 1 to 15
        p := add(0000000000000000, c_1=000000000010010) = 000000000010010
    
    for j := 2 to 15
        p := add(0000000000010010, c_2=0000000000000000) = 0000000000010010
    
    for j := 3 to 15
        p := add(0000000000010010, c_3=0000000001001000) = 0000000001011010
    
    for j := 4 to 15
        { every c_j from 4 to 15 will be 0 so p will not change after c_3}
    
return 0000000001011010
